{"version":3,"sources":["GoodsList.tsx","api/goods.ts","App.tsx","Loader.tsx","index.tsx"],"names":["GoodsList","goods","map","good","style","color","name","id","getAll","fetch","then","response","ok","headers","get","includes","json","Promise","reject","Error","SortBy","Loader","buttonNames","ALL","FIRST5","RED","App","useState","setGoods","sortBy","setSortBy","errorText","setErrorText","loading","setLoading","getGoods","promise","a","goodsFromServer","String","handleButtonClick","sort","goodsAPI","prevName","currName","localeCompare","slice","filter","className","Object","values","currentSortType","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"4PAOaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,oBAEE,UAAQ,OACRC,MAAO,CAAEC,MAAOF,EAAKE,OAHvB,SAKGF,EAAKG,MAJDH,EAAKI,UCNX,SAASC,IACd,OAAOC,MAHI,yEAIRC,MAAK,SAAAC,GAAa,IAAD,EAChB,OAAKA,EAASC,IAIV,UAACD,EAASE,QAAQC,IAAI,uBAAtB,OAAC,EAAsCC,SAAS,oBAI7CJ,EAASK,OAPPC,QAAQC,OAAOC,UAWvB,I,ECbFC,ECPQC,EAAS,kBACpB,+C,SDMGD,K,iBAAAA,E,2BAAAA,E,kBAAAA,M,KAUL,IAAME,GAAwB,mBAC3BF,EAAOG,IAAM,kBADc,cAE3BH,EAAOI,OAAS,sBAFW,cAG3BJ,EAAOK,IAAM,kBAHc,GAMjBC,EAAgB,WAC3B,MAA0BC,mBAAiB,IAA3C,mBAAO1B,EAAP,KAAc2B,EAAd,KACA,EAA4BD,mBAAS,IAArC,mBAAOE,EAAP,KAAeC,EAAf,KACA,EAAkCH,mBAAS,IAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAA8BL,oBAAS,GAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KAEMC,EAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACfH,GAAW,GACXF,EAAa,IAFE,kBAKiBI,EALjB,OAKPE,EALO,OAObV,EAASU,GAPI,gDASbN,EAAaO,OAAO,EAAD,KATN,yBAWbL,GAAW,GAXE,4EAAH,sDAeRM,EAAoB,SAACC,GACzB,GAAIZ,IAAWY,EAMf,OAFAX,EAAUW,GAEFA,GACN,KAAKrB,EAAOG,IACVY,EAASO,KACT,MACF,KAAKtB,EAAOI,OACVW,EDnCC3B,IACJE,MAAK,SAAAT,GAAK,OAAIA,EACZwC,MAAK,SAACE,EAAUC,GAAX,OACJD,EAASrC,KAAKuC,cAAcD,EAAStC,SAEtCwC,MAAM,EAAG,OC+BR,MACF,KAAK1B,EAAOK,IACVU,ED7BC3B,IACJE,MAAK,SAAAT,GAAK,OAAIA,EACZ8C,QAAO,SAAA5C,GAAI,MAAmB,QAAfA,EAAKE,eCkCzB,OACE,sBAAK2C,UAAU,MAAf,UACE,uDAEA,qBAAKA,UAAU,mBAAf,SACGC,OAAOC,OAAO9B,GAAQlB,KAAI,SAACiD,GAAD,OACzB,wBACEH,UAAU,iCACVI,KAAK,SACL,UAASD,EACTE,QAAS,WACPb,EAAkBW,IALtB,SAQG7B,EAAY6B,UAKlBlB,GACC,cAAC,EAAD,IAGDF,EACG,6CAAcA,KACd,cAAC,EAAD,CAAW9B,MAAOA,QExF5BqD,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0473b3d4.chunk.js","sourcesContent":["import React from 'react';\nimport { Good } from './types/Good';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => (\n  <ul>\n    {goods.map(good => (\n      <li\n        key={good.id}\n        data-cy=\"good\"\n        style={{ color: good.color }}\n      >\n        {good.name}\n      </li>\n    ))}\n  </ul>\n);\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport function getAll(): Promise<Good[]> {\n  return fetch(API_URL)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(Error);\n      }\n\n      if (!response.headers.get('content-type')?.includes('application/json')) {\n        return Promise.reject(Error);\n      }\n\n      return response.json();\n    });\n}\n\nexport const get5First = () => {\n  return getAll()\n    .then(goods => goods\n      .sort((prevName, currName) => (\n        prevName.name.localeCompare(currName.name)\n      ))\n      .slice(0, 5));\n};\n\nexport const getRedGoods = () => {\n  return getAll()\n    .then(goods => goods\n      .filter(good => good.color === 'red'));\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { GoodsList } from './GoodsList';\nimport * as goodsAPI from './api/goods';\nimport { Good } from './types/Good';\nimport { Loader } from './Loader';\n\nenum SortBy {\n  ALL = 'all-button',\n  FIRST5 = 'first-five-button',\n  RED = 'red-button',\n}\n\ntype ButtonNames = {\n  [key in SortBy]: string;\n};\n\nconst buttonNames: ButtonNames = {\n  [SortBy.ALL]: 'Load all goods',\n  [SortBy.FIRST5]: 'Load 5 first goods',\n  [SortBy.RED]: 'Load red goods',\n};\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n  const [sortBy, setSortBy] = useState('');\n  const [errorText, setErrorText] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const getGoods = async (promise: Promise<Good[]>): Promise<void> => {\n    setLoading(true);\n    setErrorText('');\n\n    try {\n      const goodsFromServer = await promise;\n\n      setGoods(goodsFromServer);\n    } catch (error) {\n      setErrorText(String(error));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleButtonClick = (sort: SortBy) => {\n    if (sortBy === sort) {\n      return;\n    }\n\n    setSortBy(sort);\n\n    switch (sort) {\n      case SortBy.ALL:\n        getGoods(goodsAPI.getAll());\n        break;\n      case SortBy.FIRST5:\n        getGoods(goodsAPI.get5First());\n        break;\n      case SortBy.RED:\n        getGoods(goodsAPI.getRedGoods());\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of Goods</h1>\n\n      <div className=\"field is-grouped\">\n        {Object.values(SortBy).map((currentSortType) => (\n          <button\n            className=\"button is-light mr-3 is-medium\"\n            type=\"button\"\n            data-cy={currentSortType}\n            onClick={() => {\n              handleButtonClick(currentSortType);\n            }}\n          >\n            {buttonNames[currentSortType]}\n          </button>\n        ))}\n      </div>\n\n      {loading && (\n        <Loader />\n      )}\n\n      {errorText\n        ? <p>{`Error! ${errorText}`}</p>\n        : <GoodsList goods={goods} />}\n    </div>\n  );\n};\n","export const Loader = () => (\n  <div>Loading...</div>\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}