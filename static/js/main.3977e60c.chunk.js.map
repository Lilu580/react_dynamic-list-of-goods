{"version":3,"sources":["GoodsList.tsx","api/goods.ts","App.tsx","Loader.tsx","index.tsx"],"names":["GoodsList","goods","map","good","style","color","name","id","getAll","fetch","then","response","ok","headers","get","includes","json","Promise","reject","Error","statusText","FilterOptions","Loader","buttonNames","LOAD_ALL","LOAD_FIRST_5","LOAD_RED","App","useState","setGoods","currentFilter","setCurrentFilter","errorText","setErrorText","isLoading","setIsLoading","getGoods","promise","a","goodsFromServer","String","handleButtonClick","useCallback","filterOption","sort","prevName","currName","localeCompare","slice","filter","className","Object","values","currentSortType","type","onClick","disabled","ReactDOM","render","document","getElementById"],"mappings":"4PAOaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,oBAEE,UAAQ,OACRC,MAAO,CAAEC,MAAOF,EAAKE,OAHvB,SAKGF,EAAKG,MAJDH,EAAKI,UCNX,SAASC,IACd,OAAOC,MAHI,yEAIRC,MAAK,SAAAC,GAAa,IAAD,EAChB,OAAKA,EAASC,IAMV,UAACD,EAASE,QAAQC,IAAI,uBAAtB,OAAC,EAAsCC,SAAS,oBAM7CJ,EAASK,OAXPC,QAAQC,OACb,IAAIC,MAAMR,EAASS,gBActB,I,ECjBFC,ECPQC,EAAmB,kBAC9B,+C,SDMGD,K,sBAAAA,E,iCAAAA,E,uBAAAA,M,KAQL,IAAME,GAAwB,mBAC3BF,EAAcG,SAAW,kBADE,cAE3BH,EAAcI,aAAe,sBAFF,cAG3BJ,EAAcK,SAAW,kBAHE,GAMjBC,EAAgB,WAC3B,MAA0BC,mBAAiB,IAA3C,mBAAO3B,EAAP,KAAc4B,EAAd,KACA,EAA0CD,mBAAS,IAAnD,mBAAOE,EAAP,KAAsBC,EAAtB,KACA,EAAkCH,mBAAS,IAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAAkCL,oBAAS,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KAEMC,EAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACfH,GAAa,GACbF,EAAa,IAFE,kBAIiBI,EAJjB,OAIPE,EAJO,OAMbV,EAASU,GANI,gDAQbN,EAAaO,OAAO,EAAD,KARN,yBAUbL,GAAa,GAVA,4EAAH,sDAcRM,EAAoBC,uBAAY,SAACC,GACrC,GAAIb,IAAkBa,EAMtB,OAFAZ,EAAiBY,GAETA,GACN,KAAKtB,EAAcG,SACjBY,EAAS5B,KACT,MACF,KAAKa,EAAcI,aACjBW,ED5BC5B,IACJE,MAAK,SAAAT,GAAK,OAAIA,EACZ2C,MAAK,SAACC,EAAUC,GAAX,OACJD,EAASvC,KAAKyC,cAAcD,EAASxC,SAEtC0C,MAAM,EAAG,OCwBR,MACF,KAAK3B,EAAcK,SACjBU,EDtBC5B,IACJE,MAAK,SAAAT,GAAK,OAAIA,EACZgD,QAAO,SAAA9C,GAAI,MAAmB,QAAfA,EAAKE,gBCyBtB,CAACyB,IAEJ,OACE,sBAAKoB,UAAU,MAAf,UACE,uDAEA,qBAAKA,UAAU,mBAAf,SACGC,OAAOC,OAAO/B,GAAenB,KAAI,SAACmD,GAAD,OAChC,wBACEH,UAAU,iCACVI,KAAK,SACL,UAASD,EACTE,QAAS,WACPd,EAAkBY,IAGpBG,SAAU1B,IAAkBuB,EAR9B,SAUG9B,EAAY8B,IAHRA,QAQVnB,GACC,cAAC,EAAD,IAGDF,EACG,6CAAcA,KACd,cAAC,EAAD,CAAW/B,MAAOA,QEvF5BwD,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.3977e60c.chunk.js","sourcesContent":["import React from 'react';\nimport { Good } from './types/Good';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => (\n  <ul>\n    {goods.map(good => (\n      <li\n        key={good.id}\n        data-cy=\"good\"\n        style={{ color: good.color }}\n      >\n        {good.name}\n      </li>\n    ))}\n  </ul>\n);\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport function getAll(): Promise<Good[]> {\n  return fetch(API_URL)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(\n          new Error(response.statusText),\n        );\n      }\n\n      if (!response.headers.get('content-type')?.includes('application/json')) {\n        return Promise.reject(\n          new Error(response.statusText),\n        );\n      }\n\n      return response.json();\n    });\n}\n\nexport const get5First = () => {\n  return getAll()\n    .then(goods => goods\n      .sort((prevName, currName) => (\n        prevName.name.localeCompare(currName.name)\n      ))\n      .slice(0, 5));\n};\n\nexport const getRedGoods = () => {\n  return getAll()\n    .then(goods => goods\n      .filter(good => good.color === 'red'));\n};\n","import React, { useCallback, useState } from 'react';\nimport './App.scss';\nimport { GoodsList } from './GoodsList';\nimport { getAll, get5First, getRedGoods } from './api/goods';\nimport { Good } from './types/Good';\nimport { Loader } from './Loader';\n\nenum FilterOptions {\n  LOAD_ALL = 'all-button',\n  LOAD_FIRST_5 = 'first-five-button',\n  LOAD_RED = 'red-button',\n}\n\ntype ButtonNames = Record<FilterOptions, string>;\n\nconst buttonNames: ButtonNames = {\n  [FilterOptions.LOAD_ALL]: 'Load all goods',\n  [FilterOptions.LOAD_FIRST_5]: 'Load 5 first goods',\n  [FilterOptions.LOAD_RED]: 'Load red goods',\n};\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n  const [currentFilter, setCurrentFilter] = useState('');\n  const [errorText, setErrorText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const getGoods = async (promise: Promise<Good[]>): Promise<void> => {\n    setIsLoading(true);\n    setErrorText('');\n    try {\n      const goodsFromServer = await promise;\n\n      setGoods(goodsFromServer);\n    } catch (error) {\n      setErrorText(String(error));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleButtonClick = useCallback((filterOption: FilterOptions) => {\n    if (currentFilter === filterOption) {\n      return;\n    }\n\n    setCurrentFilter(filterOption);\n\n    switch (filterOption) {\n      case FilterOptions.LOAD_ALL:\n        getGoods(getAll());\n        break;\n      case FilterOptions.LOAD_FIRST_5:\n        getGoods(get5First());\n        break;\n      case FilterOptions.LOAD_RED:\n        getGoods(getRedGoods());\n        break;\n      default:\n        break;\n    }\n  }, [currentFilter]);\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of Goods</h1>\n\n      <div className=\"field is-grouped\">\n        {Object.values(FilterOptions).map((currentSortType) => (\n          <button\n            className=\"button is-light mr-3 is-medium\"\n            type=\"button\"\n            data-cy={currentSortType}\n            onClick={() => {\n              handleButtonClick(currentSortType);\n            }}\n            key={currentSortType}\n            disabled={currentFilter === currentSortType}\n          >\n            {buttonNames[currentSortType]}\n          </button>\n        ))}\n      </div>\n\n      {isLoading && (\n        <Loader />\n      )}\n\n      {errorText\n        ? <p>{`Error! ${errorText}`}</p>\n        : <GoodsList goods={goods} />}\n    </div>\n  );\n};\n","export const Loader: React.FC = () => (\n  <div>Loading...</div>\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}